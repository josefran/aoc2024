package aoc2024;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;

public class Day16Test extends DayTest {
    @Override
    protected Day dayInstance() {
        return new Day16();
    }

    static Stream<Arguments> part1TestCases() {
        return Stream.of(
                Arguments.of("""
                        #################
                        #...#...#...#..E#
                        #.#.#.#.#.#.#.#.#
                        #.#.#.#...#...#.#
                        #.#.#.#.###.#.#.#
                        #...#.#.#.....#.#
                        #.#.#.#.#.#####.#
                        #.#...#.#.#.....#
                        #.#.#####.#.###.#
                        #.#.#.......#...#
                        #.#.###.#####.###
                        #.#.#...#.....#.#
                        #.#.#.#####.###.#
                        #.#.#.........#.#
                        #.#.#.#########.#
                        #S#.............#
                        #################
                        """, 11048),
                Arguments.of("""
                        ####################################################
                        #......................................#..........E#
                        #......................................#...........#
                        #....................#.................#...........#
                        #....................#.................#...........#
                        #....................#.................#...........#
                        #....................#.................#...........#
                        #....................#.................#...........#
                        #....................#.................#...........#
                        #....................#.................#...........#
                        #....................#.................#...........#
                        #....................#.............................#
                        #S...................#.............................#
                        ####################################################
                        """, 5078),
                Arguments.of("""
                        ###########################
                        #######################..E#
                        ######################..#.#
                        #####################..##.#
                        ####################..###.#
                        ###################..##...#
                        ##################..###.###
                        #################..####...#
                        ################..#######.#
                        ###############..##.......#
                        ##############..###.#######
                        #############..####.......#
                        ############..###########.#
                        ###########..##...........#
                        ##########..###.###########
                        #########..####...........#
                        ########..###############.#
                        #######..##...............#
                        ######..###.###############
                        #####..####...............#
                        ####..###################.#
                        ###..##...................#
                        ##..###.###################
                        #..####...................#
                        #.#######################.#
                        #S........................#
                        ###########################
                        """, 21148),
                Arguments.of("""
                        ##########
                        #.......E#
                        #.##.#####
                        #..#.....#
                        ##.#####.#
                        #S.......#
                        ##########
                        """, 4013)
        );
    }

    @ParameterizedTest
    @MethodSource("part1TestCases")
    public void part1SimpleCase(String input, long expected) {
        var day = dayInstance();
        var result = day.executePart1(input);
        assertThat(result).isEqualTo(expected);
    }

    @Override
    protected String part1ExampleInput() {
        return """
                ###############
                #.......#....E#
                #.#.###.#.###.#
                #.....#.#...#.#
                #.###.#####.#.#
                #.#.#.......#.#
                #.#.#####.###.#
                #...........#.#
                ###.#.#####.#.#
                #...#.....#.#.#
                #.#.#.###.#.#.#
                #.....#...#.#.#
                #.###.#.#.#.#.#
                #S..#.....#...#
                ###############
                """;
    }

    @Override
    protected long part1ExampleResult() {
        return 7036;
    }

    @Override
    protected long part1Result() {
        return -1;
    }

    @Override
    protected long part2ExampleResult() {
        return -1;
    }

    @Override
    protected long part2Result() {
        return -1;
    }
}
